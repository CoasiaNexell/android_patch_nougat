diff --git Android.mk Android.mk
index cabf9b3..3baa698 100644
--- Android.mk
+++ Android.mk
@@ -8,8 +8,10 @@ common_src_files := \
 	NetlinkManager.cpp \
 	NetlinkHandler.cpp \
 	Process.cpp \
+	fs/Exfat.cpp \
 	fs/Ext4.cpp \
 	fs/F2fs.cpp \
+	fs/Ntfs.cpp \
 	fs/Vfat.cpp \
 	Loop.cpp \
 	Devmapper.cpp \
diff --git Disk.cpp Disk.cpp
index 1e1a63e..d6a4e97 100644
--- Disk.cpp
+++ Disk.cpp
@@ -110,7 +110,7 @@ Disk::Disk(const std::string& eventPath, dev_t device,
         const std::string& nickname, int flags) :
         mDevice(device), mSize(-1), mNickname(nickname), mFlags(flags), mCreated(
                 false), mJustPartitioned(false) {
-    mId = StringPrintf("disk:%u,%u", major(device), minor(device));
+    mId = StringPrintf("disk:%u_%u", major(device), minor(device));
     mEventPath = eventPath;
     mSysPath = StringPrintf("/sys/%s", eventPath.c_str());
     mDevPath = StringPrintf("/dev/block/vold/%s", mId.c_str());
@@ -332,6 +332,7 @@ status_t Disk::readPartitions() {
 
                 switch (strtol(type, nullptr, 16)) {
                 case 0x06: // FAT16
+                case 0x07: // NTFS/exFAT
                 case 0x0b: // W95 FAT32 (LBA)
                 case 0x0c: // W95 FAT32 (LBA)
                 case 0x0e: // W95 FAT16 (LBA)
diff --git PublicVolume.cpp PublicVolume.cpp
index 893f928..a3b53ad 100644
--- PublicVolume.cpp
+++ PublicVolume.cpp
@@ -15,6 +15,8 @@
  */
 
 #include "fs/Vfat.h"
+#include "fs/Exfat.h"
+#include "fs/Ntfs.h"
 #include "PublicVolume.h"
 #include "Utils.h"
 #include "VolumeManager.h"
@@ -43,7 +45,7 @@ static const char* kAsecPath = "/mnt/secure/asec";
 
 PublicVolume::PublicVolume(dev_t device) :
         VolumeBase(Type::kPublic), mDevice(device), mFusePid(0) {
-    setId(StringPrintf("public:%u,%u", major(device), minor(device)));
+    setId(StringPrintf("public:%u_%u", major(device), minor(device)));
     mDevPath = StringPrintf("/dev/block/vold/%s", getId().c_str());
 }
 
@@ -90,20 +92,19 @@ status_t PublicVolume::doDestroy() {
     return DestroyDeviceNode(mDevPath);
 }
 
+#include <cutils/properties.h>
+
+static const char *CHECKFS_PROP_KEY = "persist.vold.check_fs";
+
 status_t PublicVolume::doMount() {
     // TODO: expand to support mounting other filesystems
     readMetadata();
 
-    if (mFsType != "vfat") {
+    if (!IsFilesystemSupported(mFsType)) {
         LOG(ERROR) << getId() << " unsupported filesystem " << mFsType;
         return -EIO;
     }
 
-    if (vfat::Check(mDevPath)) {
-        LOG(ERROR) << getId() << " failed filesystem check";
-        return -EIO;
-    }
-
     // Use UUID as stable name, if available
     std::string stableName = getId();
     if (!mFsUuid.empty()) {
@@ -128,8 +129,41 @@ status_t PublicVolume::doMount() {
         return -errno;
     }
 
-    if (vfat::Mount(mDevPath, mRawPath, false, false, false,
-            AID_MEDIA_RW, AID_MEDIA_RW, 0007, true)) {
+    int ret = 0;
+    int val = property_get_bool(CHECKFS_PROP_KEY, 1);
+    if (val == 1) {
+        if (mFsType == "exfat") {
+            ret = exfat::Check(mDevPath);
+        } else if (mFsType == "ntfs") {
+            ret = ntfs::Check(mDevPath);
+        } else if (mFsType == "vfat") {
+            ret = vfat::Check(mDevPath);
+        } else {
+            LOG(WARNING) << getId() << " unsupported filesystem check, skipping";
+        }
+
+        if (ret) {
+            LOG(ERROR) << getId() << " failed filesystem check";
+            return -EIO;
+        }
+    } else {
+        LOG(WARNING) << getId() << " persist.vold.check_fs prop is 0, skipping check fs";
+    }
+
+    if (mFsType == "exfat") {
+        ret = exfat::Mount(mDevPath, mRawPath, false, false, false,
+                           AID_MEDIA_RW, AID_MEDIA_RW, 0007);
+    } else if (mFsType == "ntfs") {
+        ret = ntfs::Mount(mDevPath, mRawPath, false, false, false,
+                AID_MEDIA_RW, AID_MEDIA_RW, 0007, true);
+    } else if (mFsType == "vfat") {
+        ret = vfat::Mount(mDevPath, mRawPath, false, false, false,
+                AID_MEDIA_RW, AID_MEDIA_RW, 0007, true);
+    } else {
+        ret = ::mount(mDevPath.c_str(), mRawPath.c_str(), mFsType.c_str(), 0, NULL);
+    }
+
+    if (ret) {
         PLOG(ERROR) << getId() << " failed to mount " << mDevPath;
         return -EIO;
     }
@@ -227,19 +261,37 @@ status_t PublicVolume::doUnmount() {
 }
 
 status_t PublicVolume::doFormat(const std::string& fsType) {
-    if (fsType == "vfat" || fsType == "auto") {
-        if (WipeBlockDevice(mDevPath) != OK) {
-            LOG(WARNING) << getId() << " failed to wipe";
-        }
-        if (vfat::Format(mDevPath, 0)) {
-            LOG(ERROR) << getId() << " failed to format";
-            return -errno;
-        }
-    } else {
+    // "auto" is used for newly partitioned disks (see Disk::partition*)
+    // and thus is restricted to external/removable storage.
+    if (!(IsFilesystemSupported(fsType) || fsType == "auto")) {
         LOG(ERROR) << "Unsupported filesystem " << fsType;
         return -EINVAL;
     }
 
+    if (WipeBlockDevice(mDevPath) != OK) {
+        LOG(WARNING) << getId() << " failed to wipe";
+    }
+
+    int ret = 0;
+    if (fsType == "auto") {
+        ret = vfat::Format(mDevPath, 0);
+    } else if (fsType == "exfat") {
+        ret = exfat::Format(mDevPath);
+    } else if (fsType == "ntfs") {
+        ret = ntfs::Format(mDevPath, 0);
+    } else if (fsType == "vfat") {
+        ret = vfat::Format(mDevPath, 0);
+    } else {
+        LOG(ERROR) << getId() << " unrecognized filesystem " << fsType;
+        ret = -1;
+        errno = EIO;
+    }
+
+    if (ret) {
+        LOG(ERROR) << getId() << " failed to format";
+        return -errno;
+    }
+
     return OK;
 }
 
diff --git Utils.cpp Utils.cpp
index 014055b..ad2c8dc 100644
--- Utils.cpp
+++ Utils.cpp
@@ -511,6 +511,11 @@ bool IsFilesystemSupported(const std::string& fsType) {
         PLOG(ERROR) << "Failed to read supported filesystems";
         return false;
     }
+
+    /* fuse filesystems */
+    supported.append("fuse\tntfs\n"
+                     "fuse\texfat\n");
+
     return supported.find(fsType + "\n") != std::string::npos;
 }
 
diff --git main.cpp main.cpp
index 68477ac..b849a27 100644
--- main.cpp
+++ main.cpp
@@ -56,8 +56,10 @@ int main(int argc, char** argv) {
     LOG(INFO) << "Vold 3.0 (the awakening) firing up";
 
     LOG(VERBOSE) << "Detected support for:"
+            << (android::vold::IsFilesystemSupported("exfat") ? " exfat" : "")
             << (android::vold::IsFilesystemSupported("ext4") ? " ext4" : "")
             << (android::vold::IsFilesystemSupported("f2fs") ? " f2fs" : "")
+            << (android::vold::IsFilesystemSupported("ntfs") ? " ntfs" : "")
             << (android::vold::IsFilesystemSupported("vfat") ? " vfat" : "");
 
     VolumeManager *vm;
diff --git fs/Exfat.cpp fs/Exfat.cpp
new file mode 100644
index 0000000..0e20964
--- /dev/null
+++ fs/Exfat.cpp
@@ -0,0 +1,109 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "Exfat.h"
+#include "Utils.h"
+
+#include <android-base/logging.h>
+#include <android-base/stringprintf.h>
+
+#include <vector>
+#include <string>
+
+#include <sys/mount.h>
+
+using android::base::StringPrintf;
+
+namespace android {
+namespace vold {
+namespace exfat {
+
+#ifdef MINIVOLD
+static const char* kMkfsPath = "/sbin/mkfs.exfat";
+static const char* kFsckPath = "/sbin/fsck.exfat";
+#ifdef CONFIG_KERNEL_HAVE_EXFAT
+static const char* kMountPath = "/sbin/mount";
+#else
+static const char* kMountPath = "/sbin/mount.exfat";
+#endif
+#else
+static const char* kMkfsPath = "/system/bin/mkfs.exfat";
+static const char* kFsckPath = "/system/bin/fsck.exfat";
+#ifdef CONFIG_KERNEL_HAVE_EXFAT
+static const char* kMountPath = "/system/bin/mount";
+#else
+static const char* kMountPath = "/system/bin/mount.exfat";
+#endif
+#endif
+
+bool IsSupported() {
+    return access(kMkfsPath, X_OK) == 0
+            && access(kFsckPath, X_OK) == 0
+            && access(kMountPath, X_OK) == 0
+            && IsFilesystemSupported("exfat");
+}
+
+status_t Check(const std::string& source) {
+    std::vector<std::string> cmd;
+    cmd.push_back(kFsckPath);
+    cmd.push_back(source);
+
+    // Exfat devices are currently always untrusted
+    return ForkExecvp(cmd, sFsckUntrustedContext);
+}
+
+status_t Mount(const std::string& source, const std::string& target, bool ro,
+        bool remount, bool executable, int ownerUid, int ownerGid, int permMask) {
+    char mountData[255];
+
+    const char* c_source = source.c_str();
+    const char* c_target = target.c_str();
+
+    sprintf(mountData,
+#ifdef CONFIG_KERNEL_HAVE_EXFAT
+            "noatime,nodev,nosuid,uid=%d,gid=%d,fmask=%o,dmask=%o,%s,%s",
+#else
+            "noatime,nodev,nosuid,dirsync,uid=%d,gid=%d,fmask=%o,dmask=%o,%s,%s",
+#endif
+            ownerUid, ownerGid, permMask, permMask,
+            (executable ? "exec" : "noexec"),
+            (ro ? "ro" : "rw"));
+
+    std::vector<std::string> cmd;
+    cmd.push_back(kMountPath);
+#ifdef CONFIG_KERNEL_HAVE_EXFAT
+    cmd.push_back("-t");
+    cmd.push_back("exfat");
+#endif
+    cmd.push_back("-o");
+    cmd.push_back(mountData);
+    cmd.push_back(c_source);
+    cmd.push_back(c_target);
+
+    return ForkExecvp(cmd);
+}
+
+status_t Format(const std::string& source) {
+    std::vector<std::string> cmd;
+    cmd.push_back(kMkfsPath);
+    cmd.push_back(source);
+
+    return ForkExecvp(cmd);
+}
+
+}  // namespace exfat
+}  // namespace vold
+}  // namespace android
diff --git fs/Exfat.h fs/Exfat.h
new file mode 100644
index 0000000..cd4fb5d
--- /dev/null
+++ fs/Exfat.h
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef ANDROID_VOLD_EXFAT_H
+#define ANDROID_VOLD_EXFAT_H
+
+#include <utils/Errors.h>
+
+#include <string>
+
+namespace android {
+namespace vold {
+namespace exfat {
+
+bool IsSupported();
+
+status_t Check(const std::string& source);
+status_t Mount(const std::string& source, const std::string& target, bool ro,
+        bool remount, bool executable, int ownerUid, int ownerGid, int permMask);
+status_t Format(const std::string& source);
+
+}  // namespace exfat
+}  // namespace vold
+}  // namespace android
+
+#endif
diff --git fs/Ntfs.cpp fs/Ntfs.cpp
new file mode 100644
index 0000000..c6d0813
--- /dev/null
+++ fs/Ntfs.cpp
@@ -0,0 +1,119 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "Ntfs.h"
+#include "Utils.h"
+
+#include <android-base/logging.h>
+#include <android-base/stringprintf.h>
+
+#include <vector>
+#include <string>
+
+#include <sys/mount.h>
+
+using android::base::StringPrintf;
+
+namespace android {
+namespace vold {
+namespace ntfs {
+
+#ifdef MINIVOLD
+static const char* kMkfsPath = "/sbin/mkfs.ntfs";
+static const char* kFsckPath = "/sbin/fsck.ntfs";
+#ifdef CONFIG_KERNEL_HAVE_NTFS
+static const char* kMountPath = "/sbin/mount";
+#else
+static const char* kMountPath = "/sbin/mount.ntfs";
+#endif
+#else
+static const char* kMkfsPath = "/system/bin/mkfs.ntfs";
+static const char* kFsckPath = "/system/bin/fsck.ntfs";
+#ifdef CONFIG_KERNEL_HAVE_NTFS
+static const char* kMountPath = "/system/bin/mount";
+#else
+static const char* kMountPath = "/system/bin/mount.ntfs";
+#endif
+#endif
+
+bool IsSupported() {
+    return access(kMkfsPath, X_OK) == 0
+            && access(kFsckPath, X_OK) == 0
+            && access(kMountPath, X_OK) == 0
+            && IsFilesystemSupported("ntfs");
+}
+
+status_t Check(const std::string& source) {
+    std::vector<std::string> cmd;
+    cmd.push_back(kFsckPath);
+    cmd.push_back("-n");
+    cmd.push_back(source);
+
+    // Ntfs devices are currently always untrusted
+    return ForkExecvp(cmd, sFsckUntrustedContext);
+}
+
+status_t Mount(const std::string& source, const std::string& target, bool ro,
+        bool remount, bool executable, int ownerUid, int ownerGid, int permMask,
+        bool createLost) {
+    char mountData[255];
+
+    const char* c_source = source.c_str();
+    const char* c_target = target.c_str();
+
+    sprintf(mountData,
+#ifdef CONFIG_KERNEL_HAVE_NTFS
+            "utf8,uid=%d,gid=%d,fmask=%o,dmask=%o,nodev,nosuid",
+#else
+            "utf8,uid=%d,gid=%d,fmask=%o,dmask=%o,"
+            "shortname=mixed,nodev,nosuid,dirsync",
+#endif
+            ownerUid, ownerGid, permMask, permMask);
+
+    if (!executable)
+        strcat(mountData, ",noexec");
+    if (ro)
+        strcat(mountData, ",ro");
+    if (remount)
+        strcat(mountData, ",remount");
+
+    std::vector<std::string> cmd;
+    cmd.push_back(kMountPath);
+#ifdef CONFIG_KERNEL_HAVE_NTFS
+    cmd.push_back("-t");
+    cmd.push_back("ntfs");
+#endif
+    cmd.push_back("-o");
+    cmd.push_back(mountData);
+    cmd.push_back(c_source);
+    cmd.push_back(c_target);
+
+    return ForkExecvp(cmd);
+}
+
+status_t Format(const std::string& source, bool wipe) {
+    std::vector<std::string> cmd;
+    cmd.push_back(kMkfsPath);
+    if (wipe)
+        cmd.push_back("-f");
+    cmd.push_back(source);
+
+    return ForkExecvp(cmd);
+}
+
+}  // namespace ntfs
+}  // namespace vold
+}  // namespace android
diff --git fs/Ntfs.h fs/Ntfs.h
new file mode 100644
index 0000000..805fb99
--- /dev/null
+++ fs/Ntfs.h
@@ -0,0 +1,40 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef ANDROID_VOLD_NTFS_H
+#define ANDROID_VOLD_NTFS_H
+
+#include <utils/Errors.h>
+
+#include <string>
+
+namespace android {
+namespace vold {
+namespace ntfs {
+
+bool IsSupported();
+
+status_t Check(const std::string& source);
+status_t Mount(const std::string& source, const std::string& target, bool ro,
+        bool remount, bool executable, int ownerUid, int ownerGid, int permMask,
+        bool createLost);
+status_t Format(const std::string& source, bool wipe);
+
+}  // namespace ntfs
+}  // namespace vold
+}  // namespace android
+
+#endif
