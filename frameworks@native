diff --git services/inputflinger/Android.mk services/inputflinger/Android.mk
index ed867d8..554c68b 100644
--- services/inputflinger/Android.mk
+++ services/inputflinger/Android.mk
@@ -42,6 +42,12 @@ LOCAL_CFLAGS += -Wno-unused-parameter
 
 LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)
 
+ifeq ($(BOARD_USES_TSLIB),true)
+LOCAL_CFLAGS += -DHAVE_TSLIB
+LOCAL_SHARED_LIBRARIES += libts
+LOCAL_C_INCLUDES += external/tslib/src
+endif
+
 LOCAL_MODULE := libinputflinger
 
 include $(BUILD_SHARED_LIBRARY)
diff --git services/inputflinger/EventHub.cpp services/inputflinger/EventHub.cpp
index 2a53dec..e2ea56e 100644
--- services/inputflinger/EventHub.cpp
+++ services/inputflinger/EventHub.cpp
@@ -186,7 +186,11 @@ EventHub::EventHub(void) :
         mOpeningDevices(0), mClosingDevices(0),
         mNeedToSendFinishedDeviceScan(false),
         mNeedToReopenDevices(false), mNeedToScanDevices(true),
+#ifdef HAVE_TSLIB
+        mPendingEventCount(0), mPendingEventIndex(0), mPendingINotify(false), mTS(NULL) {
+#else
         mPendingEventCount(0), mPendingEventIndex(0), mPendingINotify(false) {
+#endif
     acquire_wake_lock(PARTIAL_WAKE_LOCK, WAKE_LOCK_ID);
 
     mEpollFd = epoll_create(EPOLL_SIZE_HINT);
@@ -228,6 +232,14 @@ EventHub::EventHub(void) :
     getLinuxRelease(&major, &minor);
     // EPOLLWAKEUP was introduced in kernel 3.5
     mUsingEpollWakeup = major > 3 || (major == 3 && minor >= 5);
+
+#ifdef HAVE_TSLIB
+    mTS = (tsdev *)malloc(sizeof(struct tsdev));
+    if (!mTS)
+	ALOGE("can't alloc tsdev");
+    else
+	memset(mTS, 0, sizeof(*mTS));
+#endif
 }
 
 EventHub::~EventHub(void) {
@@ -719,305 +731,403 @@ EventHub::Device* EventHub::getDeviceByPathLocked(const char* devicePath) const
 }
 
 size_t EventHub::getEvents(int timeoutMillis, RawEvent* buffer, size_t bufferSize) {
-    ALOG_ASSERT(bufferSize >= 1);
-
-    AutoMutex _l(mLock);
-
-    struct input_event readBuffer[bufferSize];
-
-    RawEvent* event = buffer;
-    size_t capacity = bufferSize;
-    bool awoken = false;
-    for (;;) {
-        nsecs_t now = systemTime(SYSTEM_TIME_MONOTONIC);
-
-        // Reopen input devices if needed.
-        if (mNeedToReopenDevices) {
-            mNeedToReopenDevices = false;
-
-            ALOGI("Reopening all input devices due to a configuration change.");
-
-            closeAllDevicesLocked();
-            mNeedToScanDevices = true;
-            break; // return to the caller before we actually rescan
-        }
-
-        // Report any devices that had last been added/removed.
-        while (mClosingDevices) {
-            Device* device = mClosingDevices;
-            ALOGV("Reporting device closed: id=%d, name=%s\n",
-                 device->id, device->path.string());
-            mClosingDevices = device->next;
-            event->when = now;
-            event->deviceId = device->id == mBuiltInKeyboardId ? BUILT_IN_KEYBOARD_ID : device->id;
-            event->type = DEVICE_REMOVED;
-            event += 1;
-            delete device;
-            mNeedToSendFinishedDeviceScan = true;
-            if (--capacity == 0) {
-                break;
-            }
-        }
-
-        if (mNeedToScanDevices) {
-            mNeedToScanDevices = false;
-            scanDevicesLocked();
-            mNeedToSendFinishedDeviceScan = true;
-        }
-
-        while (mOpeningDevices != NULL) {
-            Device* device = mOpeningDevices;
-            ALOGV("Reporting device opened: id=%d, name=%s\n",
-                 device->id, device->path.string());
-            mOpeningDevices = device->next;
-            event->when = now;
-            event->deviceId = device->id == mBuiltInKeyboardId ? 0 : device->id;
-            event->type = DEVICE_ADDED;
-            event += 1;
-            mNeedToSendFinishedDeviceScan = true;
-            if (--capacity == 0) {
-                break;
-            }
-        }
-
-        if (mNeedToSendFinishedDeviceScan) {
-            mNeedToSendFinishedDeviceScan = false;
-            event->when = now;
-            event->type = FINISHED_DEVICE_SCAN;
-            event += 1;
-            if (--capacity == 0) {
-                break;
-            }
-        }
-
-        // Grab the next input event.
-        bool deviceChanged = false;
-        while (mPendingEventIndex < mPendingEventCount) {
-            const struct epoll_event& eventItem = mPendingEventItems[mPendingEventIndex++];
-            if (eventItem.data.u32 == EPOLL_ID_INOTIFY) {
-                if (eventItem.events & EPOLLIN) {
-                    mPendingINotify = true;
-                } else {
-                    ALOGW("Received unexpected epoll event 0x%08x for INotify.", eventItem.events);
-                }
-                continue;
-            }
-
-            if (eventItem.data.u32 == EPOLL_ID_WAKE) {
-                if (eventItem.events & EPOLLIN) {
-                    ALOGV("awoken after wake()");
-                    awoken = true;
-                    char buffer[16];
-                    ssize_t nRead;
-                    do {
-                        nRead = read(mWakeReadPipeFd, buffer, sizeof(buffer));
-                    } while ((nRead == -1 && errno == EINTR) || nRead == sizeof(buffer));
-                } else {
-                    ALOGW("Received unexpected epoll event 0x%08x for wake read pipe.",
-                            eventItem.events);
-                }
-                continue;
-            }
-
-            ssize_t deviceIndex = mDevices.indexOfKey(eventItem.data.u32);
-            if (deviceIndex < 0) {
-                ALOGW("Received unexpected epoll event 0x%08x for unknown device id %d.",
-                        eventItem.events, eventItem.data.u32);
-                continue;
-            }
+	ALOG_ASSERT(bufferSize >= 1);
 
-            Device* device = mDevices.valueAt(deviceIndex);
-            if (eventItem.events & EPOLLIN) {
-                int32_t readSize = read(device->fd, readBuffer,
-                        sizeof(struct input_event) * capacity);
-                if (readSize == 0 || (readSize < 0 && errno == ENODEV)) {
-                    // Device was removed before INotify noticed.
-                    ALOGW("could not get event, removed? (fd: %d size: %" PRId32
-                            " bufferSize: %zu capacity: %zu errno: %d)\n",
-                            device->fd, readSize, bufferSize, capacity, errno);
-                    deviceChanged = true;
-                    closeDeviceLocked(device);
-                } else if (readSize < 0) {
-                    if (errno != EAGAIN && errno != EINTR) {
-                        ALOGW("could not get event (errno=%d)", errno);
-                    }
-                } else if ((readSize % sizeof(struct input_event)) != 0) {
-                    ALOGE("could not get event (wrong size: %d)", readSize);
-                } else {
-                    int32_t deviceId = device->id == mBuiltInKeyboardId ? 0 : device->id;
-
-                    size_t count = size_t(readSize) / sizeof(struct input_event);
-                    for (size_t i = 0; i < count; i++) {
-                        struct input_event& iev = readBuffer[i];
-                        ALOGV("%s got: time=%d.%06d, type=%d, code=%d, value=%d",
-                                device->path.string(),
-                                (int) iev.time.tv_sec, (int) iev.time.tv_usec,
-                                iev.type, iev.code, iev.value);
-
-                        // Some input devices may have a better concept of the time
-                        // when an input event was actually generated than the kernel
-                        // which simply timestamps all events on entry to evdev.
-                        // This is a custom Android extension of the input protocol
-                        // mainly intended for use with uinput based device drivers.
-                        if (iev.type == EV_MSC) {
-                            if (iev.code == MSC_ANDROID_TIME_SEC) {
-                                device->timestampOverrideSec = iev.value;
-                                continue;
-                            } else if (iev.code == MSC_ANDROID_TIME_USEC) {
-                                device->timestampOverrideUsec = iev.value;
-                                continue;
-                            }
-                        }
-                        if (device->timestampOverrideSec || device->timestampOverrideUsec) {
-                            iev.time.tv_sec = device->timestampOverrideSec;
-                            iev.time.tv_usec = device->timestampOverrideUsec;
-                            if (iev.type == EV_SYN && iev.code == SYN_REPORT) {
-                                device->timestampOverrideSec = 0;
-                                device->timestampOverrideUsec = 0;
-                            }
-                            ALOGV("applied override time %d.%06d",
-                                    int(iev.time.tv_sec), int(iev.time.tv_usec));
-                        }
-
-                        // Use the time specified in the event instead of the current time
-                        // so that downstream code can get more accurate estimates of
-                        // event dispatch latency from the time the event is enqueued onto
-                        // the evdev client buffer.
-                        //
-                        // The event's timestamp fortuitously uses the same monotonic clock
-                        // time base as the rest of Android.  The kernel event device driver
-                        // (drivers/input/evdev.c) obtains timestamps using ktime_get_ts().
-                        // The systemTime(SYSTEM_TIME_MONOTONIC) function we use everywhere
-                        // calls clock_gettime(CLOCK_MONOTONIC) which is implemented as a
-                        // system call that also queries ktime_get_ts().
-                        event->when = nsecs_t(iev.time.tv_sec) * 1000000000LL
-                                + nsecs_t(iev.time.tv_usec) * 1000LL;
-                        ALOGV("event time %" PRId64 ", now %" PRId64, event->when, now);
-
-                        // Bug 7291243: Add a guard in case the kernel generates timestamps
-                        // that appear to be far into the future because they were generated
-                        // using the wrong clock source.
-                        //
-                        // This can happen because when the input device is initially opened
-                        // it has a default clock source of CLOCK_REALTIME.  Any input events
-                        // enqueued right after the device is opened will have timestamps
-                        // generated using CLOCK_REALTIME.  We later set the clock source
-                        // to CLOCK_MONOTONIC but it is already too late.
-                        //
-                        // Invalid input event timestamps can result in ANRs, crashes and
-                        // and other issues that are hard to track down.  We must not let them
-                        // propagate through the system.
-                        //
-                        // Log a warning so that we notice the problem and recover gracefully.
-                        if (event->when >= now + 10 * 1000000000LL) {
-                            // Double-check.  Time may have moved on.
-                            nsecs_t time = systemTime(SYSTEM_TIME_MONOTONIC);
-                            if (event->when > time) {
-                                ALOGW("An input event from %s has a timestamp that appears to "
-                                        "have been generated using the wrong clock source "
-                                        "(expected CLOCK_MONOTONIC): "
-                                        "event time %" PRId64 ", current time %" PRId64
-                                        ", call time %" PRId64 ".  "
-                                        "Using current time instead.",
-                                        device->path.string(), event->when, time, now);
-                                event->when = time;
-                            } else {
-                                ALOGV("Event time is ok but failed the fast path and required "
-                                        "an extra call to systemTime: "
-                                        "event time %" PRId64 ", current time %" PRId64
-                                        ", call time %" PRId64 ".",
-                                        event->when, time, now);
-                            }
-                        }
-                        event->deviceId = deviceId;
-                        event->type = iev.type;
-                        event->code = iev.code;
-                        event->value = iev.value;
-                        event += 1;
-                        capacity -= 1;
-                    }
-                    if (capacity == 0) {
-                        // The result buffer is full.  Reset the pending event index
-                        // so we will try to read the device again on the next iteration.
-                        mPendingEventIndex -= 1;
-                        break;
-                    }
-                }
-            } else if (eventItem.events & EPOLLHUP) {
-                ALOGI("Removing device %s due to epoll hang-up event.",
-                        device->identifier.name.string());
-                deviceChanged = true;
-                closeDeviceLocked(device);
-            } else {
-                ALOGW("Received unexpected epoll event 0x%08x for device %s.",
-                        eventItem.events, device->identifier.name.string());
-            }
-        }
+	AutoMutex _l(mLock);
 
-        // readNotify() will modify the list of devices so this must be done after
-        // processing all other events to ensure that we read all remaining events
-        // before closing the devices.
-        if (mPendingINotify && mPendingEventIndex >= mPendingEventCount) {
-            mPendingINotify = false;
-            readNotifyLocked();
-            deviceChanged = true;
-        }
+	struct input_event readBuffer[bufferSize];
 
-        // Report added or removed devices immediately.
-        if (deviceChanged) {
-            continue;
-        }
+	RawEvent* event = buffer;
+	size_t capacity = bufferSize;
+	bool awoken = false;
 
-        // Return now if we have collected any events or if we were explicitly awoken.
-        if (event != buffer || awoken) {
-            break;
-        }
-
-        // Poll for events.  Mind the wake lock dance!
-        // We hold a wake lock at all times except during epoll_wait().  This works due to some
-        // subtle choreography.  When a device driver has pending (unread) events, it acquires
-        // a kernel wake lock.  However, once the last pending event has been read, the device
-        // driver will release the kernel wake lock.  To prevent the system from going to sleep
-        // when this happens, the EventHub holds onto its own user wake lock while the client
-        // is processing events.  Thus the system can only sleep if there are no events
-        // pending or currently being processed.
-        //
-        // The timeout is advisory only.  If the device is asleep, it will not wake just to
-        // service the timeout.
-        mPendingEventIndex = 0;
-
-        mLock.unlock(); // release lock before poll, must be before release_wake_lock
-        release_wake_lock(WAKE_LOCK_ID);
-
-        int pollResult = epoll_wait(mEpollFd, mPendingEventItems, EPOLL_MAX_EVENTS, timeoutMillis);
-
-        acquire_wake_lock(PARTIAL_WAKE_LOCK, WAKE_LOCK_ID);
-        mLock.lock(); // reacquire lock after poll, must be after acquire_wake_lock
-
-        if (pollResult == 0) {
-            // Timed out.
-            mPendingEventCount = 0;
-            break;
-        }
+#ifdef HAVE_TSLIB
+	int numOfEventsSent = 0;
+	struct ts_sample samp;
+	samp.total_events = 0;
+	int32_t deviceId;
+#endif
 
-        if (pollResult < 0) {
-            // An error occurred.
-            mPendingEventCount = 0;
+	for (;;) {
+#ifdef HAVE_TSLIB
+		if (samp.total_events == 0) {
+#endif
+			nsecs_t now = systemTime(SYSTEM_TIME_MONOTONIC);
+
+			// Reopen input devices if needed.
+			if (mNeedToReopenDevices) {
+				mNeedToReopenDevices = false;
+
+				ALOGI("Reopening all input devices due to a configuration change.");
+
+				closeAllDevicesLocked();
+				mNeedToScanDevices = true;
+				break; // return to the caller before we actually rescan
+			}
+
+			// Report any devices that had last been added/removed.
+			while (mClosingDevices) {
+				Device* device = mClosingDevices;
+				ALOGV("Reporting device closed: id=%d, name=%s\n",
+					  device->id, device->path.string());
+				mClosingDevices = device->next;
+				event->when = now;
+				event->deviceId = device->id == mBuiltInKeyboardId ? BUILT_IN_KEYBOARD_ID : device->id;
+				event->type = DEVICE_REMOVED;
+				event += 1;
+				delete device;
+				mNeedToSendFinishedDeviceScan = true;
+				if (--capacity == 0) {
+					break;
+				}
+			}
+
+			if (mNeedToScanDevices) {
+				mNeedToScanDevices = false;
+				scanDevicesLocked();
+				mNeedToSendFinishedDeviceScan = true;
+			}
+
+			while (mOpeningDevices != NULL) {
+				Device* device = mOpeningDevices;
+				ALOGV("Reporting device opened: id=%d, name=%s\n",
+					  device->id, device->path.string());
+				mOpeningDevices = device->next;
+				event->when = now;
+				event->deviceId = device->id == mBuiltInKeyboardId ? 0 : device->id;
+				event->type = DEVICE_ADDED;
+				event += 1;
+				mNeedToSendFinishedDeviceScan = true;
+				if (--capacity == 0) {
+					break;
+				}
+			}
+
+			if (mNeedToSendFinishedDeviceScan) {
+				mNeedToSendFinishedDeviceScan = false;
+				event->when = now;
+				event->type = FINISHED_DEVICE_SCAN;
+				event += 1;
+				if (--capacity == 0) {
+					break;
+				}
+			}
+
+			// Grab the next input event.
+			bool deviceChanged = false;
+			while (mPendingEventIndex < mPendingEventCount) {
+				const struct epoll_event& eventItem = mPendingEventItems[mPendingEventIndex++];
+				if (eventItem.data.u32 == EPOLL_ID_INOTIFY) {
+					if (eventItem.events & EPOLLIN) {
+						mPendingINotify = true;
+					} else {
+						ALOGW("Received unexpected epoll event 0x%08x for INotify.", eventItem.events);
+					}
+					continue;
+				}
+
+				if (eventItem.data.u32 == EPOLL_ID_WAKE) {
+					if (eventItem.events & EPOLLIN) {
+						ALOGV("awoken after wake()");
+						awoken = true;
+						char buffer[16];
+						ssize_t nRead;
+						do {
+							nRead = read(mWakeReadPipeFd, buffer, sizeof(buffer));
+						} while ((nRead == -1 && errno == EINTR) || nRead == sizeof(buffer));
+					} else {
+						ALOGW("Received unexpected epoll event 0x%08x for wake read pipe.",
+							  eventItem.events);
+					}
+					continue;
+				}
+
+				ssize_t deviceIndex = mDevices.indexOfKey(eventItem.data.u32);
+				if (deviceIndex < 0) {
+					ALOGW("Received unexpected epoll event 0x%08x for unknown device id %d.",
+						  eventItem.events, eventItem.data.u32);
+					continue;
+				}
+
+				Device* device = mDevices.valueAt(deviceIndex);
+				if (eventItem.events & EPOLLIN) {
+#ifdef HAVE_TSLIB
+					int32_t readSize = 0;
+
+					if (mTS != NULL) {
+						if (device->fd != mTS->fd) {
+							readSize = read(device->fd, readBuffer,
+											sizeof(struct input_event) * capacity);
+						} else {
+							char ts_property[128] = {0, };
+
+							property_get("persist.calibration.state", ts_property, NULL);
+							if (!strcmp(ts_property, "start")) {
+								ALOGV("tslib: persist.calibration.state ==> start");
+								readSize = ts_read_raw(mTS, &samp, 1);
+								ALOGV("readSize of ts_read_raw() ==> %d", readSize);
+								if (readSize < 0) {
+									ALOGE("Error in ts_read_raw()\n");
+								} else {
+									numOfEventsSent = 0;
+									samp.tsIndex = deviceIndex;
+									deviceId = device->id == mBuiltInKeyboardId ? 0 : device->id;
+									break;
+								}
+							} else {
+								if (!strcmp(ts_property, "done")) {
+									ALOGD("tslib: persist.calibration.state ==> done");
+									mTS->list = NULL;
+									mTS->list_raw = NULL;
+
+									if (ts_config(mTS))
+										ALOGE("Error in configuring tslib");
+
+									property_set("persist.calibration.state", "over");
+								}
+
+								readSize = ts_read(mTS, &samp, 1);
+								ALOGV("readSize of ts_read() ==> %d", readSize);
+								if (readSize < 0) {
+									ALOGE("Error in ts_read()");
+								} else {
+									numOfEventsSent = 0;
+									samp.tsIndex = deviceIndex;
+									deviceId = device->id == mBuiltInKeyboardId ? 0 : device->id;
+									break;
+								}
+							}
+						}
+					} else {
+						ALOGE("Error in setup of mTS: mTS is NULL");
+					}
+#else
+					int32_t readSize = read(device->fd, readBuffer,
+											sizeof(struct input_event) * capacity);
+#endif
+					if (readSize == 0 || (readSize < 0 && errno == ENODEV)) {
+						// Device was removed before INotify noticed.
+						ALOGW("could not get event, removed? (fd: %d size: %" PRId32
+							  " bufferSize: %zu capacity: %zu errno: %d)\n",
+							  device->fd, readSize, bufferSize, capacity, errno);
+						deviceChanged = true;
+						closeDeviceLocked(device);
+					} else if (readSize < 0) {
+						if (errno != EAGAIN && errno != EINTR) {
+							ALOGW("could not get event (errno=%d)", errno);
+						}
+					} else if ((readSize % sizeof(struct input_event)) != 0) {
+						ALOGE("could not get event (wrong size: %d)", readSize);
+					} else {
+#ifdef HAVE_TSLIB
+						deviceId = device->id == mBuiltInKeyboardId ? 0 : device->id;
+#else
+						int32_t deviceId = device->id == mBuiltInKeyboardId ? 0 : device->id;
+#endif
 
-            // Sleep after errors to avoid locking up the system.
-            // Hopefully the error is transient.
-            if (errno != EINTR) {
-                ALOGW("poll failed (errno=%d)\n", errno);
-                usleep(100000);
-            }
-        } else {
-            // Some events occurred.
-            mPendingEventCount = size_t(pollResult);
-        }
-    }
+						size_t count = size_t(readSize) / sizeof(struct input_event);
+						for (size_t i = 0; i < count; i++) {
+							struct input_event& iev = readBuffer[i];
+							ALOGV("%s got: time=%d.%06d, type=%d, code=%d, value=%d",
+								  device->path.string(),
+								  (int) iev.time.tv_sec, (int) iev.time.tv_usec,
+								  iev.type, iev.code, iev.value);
+
+							// Some input devices may have a better concept of the time
+							// when an input event was actually generated than the kernel
+							// which simply timestamps all events on entry to evdev.
+							// This is a custom Android extension of the input protocol
+							// mainly intended for use with uinput based device drivers.
+							if (iev.type == EV_MSC) {
+								if (iev.code == MSC_ANDROID_TIME_SEC) {
+									device->timestampOverrideSec = iev.value;
+									continue;
+								} else if (iev.code == MSC_ANDROID_TIME_USEC) {
+									device->timestampOverrideUsec = iev.value;
+									continue;
+								}
+							}
+							if (device->timestampOverrideSec || device->timestampOverrideUsec) {
+								iev.time.tv_sec = device->timestampOverrideSec;
+								iev.time.tv_usec = device->timestampOverrideUsec;
+								if (iev.type == EV_SYN && iev.code == SYN_REPORT) {
+									device->timestampOverrideSec = 0;
+									device->timestampOverrideUsec = 0;
+								}
+								ALOGV("applied override time %d.%06d",
+									  int(iev.time.tv_sec), int(iev.time.tv_usec));
+							}
+
+							// Use the time specified in the event instead of the current time
+							// so that downstream code can get more accurate estimates of
+							// event dispatch latency from the time the event is enqueued onto
+							// the evdev client buffer.
+							//
+							// The event's timestamp fortuitously uses the same monotonic clock
+							// time base as the rest of Android.  The kernel event device driver
+							// (drivers/input/evdev.c) obtains timestamps using ktime_get_ts().
+							// The systemTime(SYSTEM_TIME_MONOTONIC) function we use everywhere
+							// calls clock_gettime(CLOCK_MONOTONIC) which is implemented as a
+							// system call that also queries ktime_get_ts().
+							event->when = nsecs_t(iev.time.tv_sec) * 1000000000LL
+								+ nsecs_t(iev.time.tv_usec) * 1000LL;
+							ALOGV("event time %" PRId64 ", now %" PRId64, event->when, now);
+
+							// Bug 7291243: Add a guard in case the kernel generates timestamps
+							// that appear to be far into the future because they were generated
+							// using the wrong clock source.
+							//
+							// This can happen because when the input device is initially opened
+							// it has a default clock source of CLOCK_REALTIME.  Any input events
+							// enqueued right after the device is opened will have timestamps
+							// generated using CLOCK_REALTIME.  We later set the clock source
+							// to CLOCK_MONOTONIC but it is already too late.
+							//
+							// Invalid input event timestamps can result in ANRs, crashes and
+							// and other issues that are hard to track down.  We must not let them
+							// propagate through the system.
+							//
+							// Log a warning so that we notice the problem and recover gracefully.
+							if (event->when >= now + 10 * 1000000000LL) {
+								// Double-check.  Time may have moved on.
+								nsecs_t time = systemTime(SYSTEM_TIME_MONOTONIC);
+								if (event->when > time) {
+									ALOGW("An input event from %s has a timestamp that appears to "
+										  "have been generated using the wrong clock source "
+										  "(expected CLOCK_MONOTONIC): "
+										  "event time %" PRId64 ", current time %" PRId64
+										  ", call time %" PRId64 ".  "
+										  "Using current time instead.",
+										  device->path.string(), event->when, time, now);
+									event->when = time;
+								} else {
+									ALOGV("Event time is ok but failed the fast path and required "
+										  "an extra call to systemTime: "
+										  "event time %" PRId64 ", current time %" PRId64
+										  ", call time %" PRId64 ".",
+										  event->when, time, now);
+								}
+							}
+							event->deviceId = deviceId;
+							event->type = iev.type;
+							event->code = iev.code;
+							event->value = iev.value;
+							event += 1;
+							capacity -= 1;
+						}
+						if (capacity == 0) {
+							// The result buffer is full.  Reset the pending event index
+							// so we will try to read the device again on the next iteration.
+							mPendingEventIndex -= 1;
+							break;
+						}
+					}
+				} else if (eventItem.events & EPOLLHUP) {
+					ALOGI("Removing device %s due to epoll hang-up event.",
+						  device->identifier.name.string());
+					deviceChanged = true;
+					closeDeviceLocked(device);
+				} else {
+					ALOGW("Received unexpected epoll event 0x%08x for device %s.",
+						  eventItem.events, device->identifier.name.string());
+				}
+			} /* while end */
+
+			// readNotify() will modify the list of devices so this must be done after
+			// processing all other events to ensure that we read all remaining events
+			// before closing the devices.
+			if (mPendingINotify && mPendingEventIndex >= mPendingEventCount) {
+				mPendingINotify = false;
+				readNotifyLocked();
+				deviceChanged = true;
+			}
+
+			// Report added or removed devices immediately.
+			if (deviceChanged) {
+				continue;
+			}
+
+#ifdef HAVE_TSLIB
+		}
+
+		if (samp.total_events) {
+			for (int i = 0; i < samp.total_events; i++, event++) {
+				event->deviceId = deviceId;
+				event->type = samp.ev[i].type;
+				event->code = samp.ev[i].code;
+
+				ALOGV("id =%d, type=%d, code=%d, x=%d, y=%d, press=%d, value=%d",
+				      deviceId, samp.ev[i].type,
+				      samp.ev[i].code, samp.x, samp.y, samp.pressure,
+				      samp.ev[i].value);
+				if (event->type == EV_ABS) {
+					if (event->code == ABS_X)
+						event->value = samp.x;
+					else if (event->code == ABS_Y)
+						event->value = samp.y;
+					else if (event->code == ABS_PRESSURE)
+						event->value = samp.pressure;
+				} else {
+					event->value = samp.ev[i].value;
+					event->when = systemTime(SYSTEM_TIME_MONOTONIC);
+				}
+			}
+
+			numOfEventsSent = samp.total_events;
+			samp.total_events = 0;
+		}
+#endif
 
-    // All done, return the number of events we read.
-    return event - buffer;
+		// Return now if we have collected any events or if we were explicitly awoken.
+		if (event != buffer || awoken) {
+			break;
+		}
+
+		// Poll for events.  Mind the wake lock dance!
+		// We hold a wake lock at all times except during epoll_wait().  This works due to some
+		// subtle choreography.  When a device driver has pending (unread) events, it acquires
+		// a kernel wake lock.  However, once the last pending event has been read, the device
+		// driver will release the kernel wake lock.  To prevent the system from going to sleep
+		// when this happens, the EventHub holds onto its own user wake lock while the client
+		// is processing events.  Thus the system can only sleep if there are no events
+		// pending or currently being processed.
+		//
+		// The timeout is advisory only.  If the device is asleep, it will not wake just to
+		// service the timeout.
+		mPendingEventIndex = 0;
+
+		mLock.unlock(); // release lock before poll, must be before release_wake_lock
+		release_wake_lock(WAKE_LOCK_ID);
+
+		int pollResult = epoll_wait(mEpollFd, mPendingEventItems, EPOLL_MAX_EVENTS, timeoutMillis);
+
+		acquire_wake_lock(PARTIAL_WAKE_LOCK, WAKE_LOCK_ID);
+		mLock.lock(); // reacquire lock after poll, must be after acquire_wake_lock
+
+		if (pollResult == 0) {
+			// Timed out.
+			mPendingEventCount = 0;
+			break;
+		}
+
+		if (pollResult < 0) {
+			// An error occurred.
+			mPendingEventCount = 0;
+
+			// Sleep after errors to avoid locking up the system.
+			// Hopefully the error is transient.
+			if (errno != EINTR) {
+				ALOGW("poll failed (errno=%d)\n", errno);
+				usleep(100000);
+			}
+		} else {
+			// Some events occurred.
+			mPendingEventCount = size_t(pollResult);
+		}
+	}
+
+	// All done, return the number of events we read.
+	return event - buffer;
 }
 
 void EventHub::wake() {
@@ -1215,6 +1325,14 @@ status_t EventHub::openDeviceLocked(const char *devicePath) {
             && test_bit(ABS_X, device->absBitmask)
             && test_bit(ABS_Y, device->absBitmask)) {
         device->classes |= INPUT_DEVICE_CLASS_TOUCH;
+
+#ifdef HAVE_TSLIB
+		mTS->fd = fd;
+		ALOGI("TS Device fd: %d", fd);
+		ALOGI("tslib: call ts_config");
+		if (ts_config(mTS))
+			ALOGE("Error in ts_config");
+#endif
     // Is this a BT stylus?
     } else if ((test_bit(ABS_PRESSURE, device->absBitmask) ||
                 test_bit(BTN_TOUCH, device->keyBitmask))
diff --git services/inputflinger/EventHub.h services/inputflinger/EventHub.h
index 6869253..95d3016 100644
--- services/inputflinger/EventHub.h
+++ services/inputflinger/EventHub.h
@@ -38,6 +38,10 @@
 #include <linux/input.h>
 #include <sys/epoll.h>
 
+#ifdef HAVE_TSLIB
+#include <tslib-private.h>
+#endif
+
 /* Convenience constants. */
 
 #define BTN_FIRST 0x100  // first button code
@@ -462,6 +466,10 @@ private:
     bool mPendingINotify;
 
     bool mUsingEpollWakeup;
+
+#ifdef HAVE_TSLIB
+    struct tsdev *mTS;
+#endif
 };
 
 }; // namespace android
diff --git services/surfaceflinger/DisplayHardware/HWComposer_hwc1.cpp services/surfaceflinger/DisplayHardware/HWComposer_hwc1.cpp
index ef41658..e44fcc0 100644
--- services/surfaceflinger/DisplayHardware/HWComposer_hwc1.cpp
+++ services/surfaceflinger/DisplayHardware/HWComposer_hwc1.cpp
@@ -657,7 +657,7 @@ status_t HWComposer::setFramebufferTarget(int32_t id,
     disp.fbTargetHandle = buf->handle;
     disp.framebufferTarget->handle = disp.fbTargetHandle;
     disp.framebufferTarget->acquireFenceFd = acquireFenceFd;
-    return NO_ERROR;
+	return mHwc->setFramebufferTarget(mHwc, id, disp.framebufferTarget);
 }
 
 status_t HWComposer::prepare() {
@@ -786,8 +786,6 @@ status_t HWComposer::commit() {
             }
         }
 
-        err = mHwc->set(mHwc, mNumDisplays, mLists);
-
         for (size_t i=0 ; i<mNumDisplays ; i++) {
             DisplayData& disp(mDisplayData[i]);
             disp.lastDisplayFence = disp.lastRetireFence;
