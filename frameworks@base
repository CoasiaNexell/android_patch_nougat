diff --git media/java/android/media/MediaFile.java media/java/android/media/MediaFile.java
index da490b9..0082fa5 100644
--- media/java/android/media/MediaFile.java
+++ media/java/android/media/MediaFile.java
@@ -32,6 +32,8 @@ import java.util.Locale;
  */
 public class MediaFile {
 
+/**
+ * org
     // Audio file types
     public static final int FILE_TYPE_MP3     = 1;
     public static final int FILE_TYPE_M4A     = 2;
@@ -52,8 +54,40 @@ public class MediaFile {
     public static final int FILE_TYPE_IMY     = 13;
     private static final int FIRST_MIDI_FILE_TYPE = FILE_TYPE_MID;
     private static final int LAST_MIDI_FILE_TYPE = FILE_TYPE_IMY;
+*/
+
+/****************************************************************/
+/**
+ * Add by hcjun for Audio APE
+ */
+
+    // Audio file types
+    public static final int FILE_TYPE_MP3     = 1;
+    public static final int FILE_TYPE_M4A     = 2;
+    public static final int FILE_TYPE_WAV     = 3;
+    public static final int FILE_TYPE_AMR     = 4;
+    public static final int FILE_TYPE_AWB     = 5;
+    public static final int FILE_TYPE_WMA     = 6;
+    public static final int FILE_TYPE_OGG     = 7;
+    public static final int FILE_TYPE_AAC     = 8;
+    public static final int FILE_TYPE_MKA     = 9;
+    public static final int FILE_TYPE_APE     = 10;
+    public static final int FILE_TYPE_FLAC    = 11;
+    private static final int FIRST_AUDIO_FILE_TYPE = FILE_TYPE_MP3;
+    private static final int LAST_AUDIO_FILE_TYPE = FILE_TYPE_FLAC;
+
+    // MIDI file types
+    public static final int FILE_TYPE_MID     = 12;
+    public static final int FILE_TYPE_SMF     = 13;
+    public static final int FILE_TYPE_IMY     = 14;
+    private static final int FIRST_MIDI_FILE_TYPE = FILE_TYPE_MID;
+    private static final int LAST_MIDI_FILE_TYPE = FILE_TYPE_IMY;
+/****************************************************************/
 
     // Video file types
+    public static final int FILE_TYPE_FLV     = 19;
+    public static final int FILE_TYPE_RV      = 20;
+
     public static final int FILE_TYPE_MP4     = 21;
     public static final int FILE_TYPE_M4V     = 22;
     public static final int FILE_TYPE_3GPP    = 23;
@@ -64,7 +98,8 @@ public class MediaFile {
     public static final int FILE_TYPE_MP2TS   = 28;
     public static final int FILE_TYPE_AVI     = 29;
     public static final int FILE_TYPE_WEBM    = 30;
-    private static final int FIRST_VIDEO_FILE_TYPE = FILE_TYPE_MP4;
+//org    private static final int FIRST_VIDEO_FILE_TYPE = FILE_TYPE_MP4;
+    private static final int FIRST_VIDEO_FILE_TYPE = FILE_TYPE_FLV;
     private static final int LAST_VIDEO_FILE_TYPE = FILE_TYPE_WEBM;
 
     // More video file types
@@ -188,9 +223,11 @@ public class MediaFile {
         addFileType("WAV", FILE_TYPE_WAV, "audio/x-wav", MtpConstants.FORMAT_WAV);
         addFileType("AMR", FILE_TYPE_AMR, "audio/amr");
         addFileType("AWB", FILE_TYPE_AWB, "audio/amr-wb");
-        if (isWMAEnabled()) {
+        //if (isWMAEnabled()) {
             addFileType("WMA", FILE_TYPE_WMA, "audio/x-ms-wma", MtpConstants.FORMAT_WMA);
-        }
+
+           addFileType("APE", FILE_TYPE_APE, "audio/ape", MtpConstants.FORMAT_WMA);
+        //}
         addFileType("OGG", FILE_TYPE_OGG, "audio/ogg", MtpConstants.FORMAT_OGG);
         addFileType("OGG", FILE_TYPE_OGG, "application/ogg", MtpConstants.FORMAT_OGG);
         addFileType("OGA", FILE_TYPE_OGG, "application/ogg", MtpConstants.FORMAT_OGG);
@@ -223,10 +260,17 @@ public class MediaFile {
         addFileType("TS", FILE_TYPE_MP2TS, "video/mp2ts");
         addFileType("AVI", FILE_TYPE_AVI, "video/avi");
 
-        if (isWMVEnabled()) {
+        //if (isWMVEnabled()) {
             addFileType("WMV", FILE_TYPE_WMV, "video/x-ms-wmv", MtpConstants.FORMAT_WMV);
             addFileType("ASF", FILE_TYPE_ASF, "video/x-ms-asf");
-        }
+        //}
+
+		// Add by hcjun
+        addFileType("M2TS", FILE_TYPE_MP2TS, "video/mp2ts");
+        addFileType("TP", FILE_TYPE_MP2TS, "video/mp2ts");
+        addFileType("FLV", FILE_TYPE_FLV, "video/x-flv");
+        addFileType("VOB", FILE_TYPE_MP4, "video/mpeg", MtpConstants.FORMAT_MPEG);
+        addFileType("RMVB", FILE_TYPE_RV, "video/rm");
 
         addFileType("JPG", FILE_TYPE_JPEG, "image/jpeg", MtpConstants.FORMAT_EXIF_JPEG);
         addFileType("JPEG", FILE_TYPE_JPEG, "image/jpeg", MtpConstants.FORMAT_EXIF_JPEG);
diff --git media/jni/android_media_ImageReader.cpp media/jni/android_media_ImageReader.cpp
index 724fc02..08d03a6 100644
--- media/jni/android_media_ImageReader.cpp
+++ media/jni/android_media_ImageReader.cpp
@@ -552,7 +552,11 @@ static jint ImageReader_imageSetup(JNIEnv* env, jobject thiz, jobject image) {
                 // Using HAL_PIXEL_FORMAT_RGBA_8888 Gralloc buffers containing JPEGs to get around
                 // SW write limitations for (b/17379185).
                 ALOGV("%s: Receiving JPEG in HAL_PIXEL_FORMAT_RGBA_8888 buffer.", __FUNCTION__);
-            } else {
+            } else if (ctx->getBufferFormat() == 0x1 &&
+		       bufferFormat == 0x2) {
+		    ALOGV("Producer output buffer format: 0x%x, ImageReader configured format: 0x%x",
+			  bufferFormat, ctx->getBufferFormat());
+	    } else {
                 // Return the buffer to the queue. No need to provide fence, as this buffer wasn't
                 // used anywhere yet.
                 bufferConsumer->releaseBuffer(*buffer);
diff --git packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
index 9d22b4a..f8f3b46 100644
--- packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
+++ packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
@@ -62,8 +62,8 @@ import android.service.dreams.IDreamManager;
 import android.service.notification.NotificationListenerService;
 import android.service.notification.NotificationListenerService.RankingMap;
 import android.service.notification.StatusBarNotification;
-import android.service.vr.IVrManager;
-import android.service.vr.IVrStateCallbacks;
+// import android.service.vr.IVrManager;
+// import android.service.vr.IVrStateCallbacks;
 import android.text.TextUtils;
 import android.util.ArraySet;
 import android.util.Log;
@@ -274,7 +274,7 @@ public abstract class BaseStatusBar extends SystemUI implements
 
     protected AssistManager mAssistManager;
 
-    protected boolean mVrMode;
+    // protected boolean mVrMode;
 
     private Set<String> mNonBlockablePkgs;
 
@@ -283,15 +283,16 @@ public abstract class BaseStatusBar extends SystemUI implements
         return mDeviceProvisioned;
     }
 
-    private final IVrStateCallbacks mVrStateCallbacks = new IVrStateCallbacks.Stub() {
-        @Override
-        public void onVrStateChanged(boolean enabled) {
-            mVrMode = enabled;
-        }
-    };
+    // private final IVrStateCallbacks mVrStateCallbacks = new IVrStateCallbacks.Stub() {
+    //     @Override
+    //     public void onVrStateChanged(boolean enabled) {
+    //         mVrMode = enabled;
+    //     }
+    // };
 
     public boolean isDeviceInVrMode() {
-        return mVrMode;
+        // return mVrMode;
+		return false;
     }
 
     protected final ContentObserver mSettingsObserver = new ContentObserver(mHandler) {
@@ -827,12 +828,12 @@ public abstract class BaseStatusBar extends SystemUI implements
                 null, null);
         updateCurrentProfilesCache();
 
-        IVrManager vrManager = IVrManager.Stub.asInterface(ServiceManager.getService("vrmanager"));
-        try {
-            vrManager.registerListener(mVrStateCallbacks);
-        } catch (RemoteException e) {
-            Slog.e(TAG, "Failed to register VR mode state listener: " + e);
-        }
+        // IVrManager vrManager = IVrManager.Stub.asInterface(ServiceManager.getService("vrmanager"));
+        // try {
+        //     vrManager.registerListener(mVrStateCallbacks);
+        // } catch (RemoteException e) {
+        //     Slog.e(TAG, "Failed to register VR mode state listener: " + e);
+        // }
 
         mNonBlockablePkgs = new ArraySet<String>();
         Collections.addAll(mNonBlockablePkgs, mContext.getResources().getStringArray(
diff --git services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java
index e3b6ecc..9bedfa4 100644
--- services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java
+++ services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java
@@ -9236,7 +9236,20 @@ public class DevicePolicyManagerService extends IDevicePolicyManager.Stub {
         ensureDeviceOwnerManagingSingleUser(admin);
 
         List<SecurityEvent> logs = mSecurityLogMonitor.retrieveLogs();
-        return logs != null ? new ParceledListSlice<SecurityEvent>(logs) : null;
+		if (logs != null) {
+			List<SecurityEvent> myLogs = new ArrayList<SecurityEvent>();;
+			for (int i = 0; i < logs.size(); i++) {
+				SecurityEvent event = logs.get(i);
+				long currentTimestampNanos = event.getTimeNanos();
+				Slog.d(LOG_TAG, i + "th log t --> " + currentTimestampNanos);
+				if ((event.getTimeNanos() / (1000*1000*1000)) > 1000000000)
+					myLogs.add(event);
+			}
+
+			return new ParceledListSlice<SecurityEvent>(myLogs);
+		} else {
+			return null;
+		}
     }
 
     private void enforceCanManageDeviceAdmin() {
