diff --git server/RouteController.cpp server/RouteController.cpp
index fa39c89..507202a 100644
--- server/RouteController.cpp
+++ server/RouteController.cpp
@@ -78,7 +78,10 @@ const char* const ROUTE_TABLE_NAME_MAIN  = "main";
 // it upstream, we'll remove this and rely on the kernel header values. For now, add a static assert
 // that will warn us if upstream has given these values some other meaning.
 const uint16_t FRA_UID_START = 18;
+#if 0
 const uint16_t FRA_UID_END   = 19;
+#endif
+const uint16_t FRA_UID_RANGE = 20;
 static_assert(FRA_UID_START > FRA_MAX,
              "Android-specific FRA_UID_{START,END} values also assigned in Linux uapi. "
              "Check that these values match what the kernel does and then update this assertion.");
@@ -111,14 +114,22 @@ constexpr uint16_t U16_RTA_LENGTH(uint16_t x) {
     return RTA_LENGTH(x);
 }
 
+struct fib_rule_uid_range {
+	__u32 start;
+	__u32 end;
+};
+
 // These are practically const, but can't be declared so, because they are used to initialize
 // non-const pointers ("void* iov_base") in iovec arrays.
 rtattr FRATTR_PRIORITY  = { U16_RTA_LENGTH(sizeof(uint32_t)), FRA_PRIORITY };
 rtattr FRATTR_TABLE     = { U16_RTA_LENGTH(sizeof(uint32_t)), FRA_TABLE };
 rtattr FRATTR_FWMARK    = { U16_RTA_LENGTH(sizeof(uint32_t)), FRA_FWMARK };
 rtattr FRATTR_FWMASK    = { U16_RTA_LENGTH(sizeof(uint32_t)), FRA_FWMASK };
+#if 0
 rtattr FRATTR_UID_START = { U16_RTA_LENGTH(sizeof(uid_t)),    FRA_UID_START };
 rtattr FRATTR_UID_END   = { U16_RTA_LENGTH(sizeof(uid_t)),    FRA_UID_END };
+#endif
+rtattr FRATTR_UID_RANGE = { U16_RTA_LENGTH(sizeof(struct fib_rule_uid_range)), FRA_UID_RANGE};
 
 rtattr RTATTR_TABLE     = { U16_RTA_LENGTH(sizeof(uint32_t)), RTA_TABLE };
 rtattr RTATTR_OIF       = { U16_RTA_LENGTH(sizeof(uint32_t)), RTA_OIF };
@@ -309,6 +320,12 @@ WARN_UNUSED_RESULT int modifyIpRule(uint16_t action, uint32_t priority, uint8_t
     rtattr fraIifName = { U16_RTA_LENGTH(iifLength), FRA_IIFNAME };
     rtattr fraOifName = { U16_RTA_LENGTH(oifLength), FRA_OIFNAME };
 
+	struct fib_rule_uid_range uid_range;
+	uid_range.start = uidStart;
+	uid_range.end = uidEnd;
+	if (isUidRule)
+		ALOGD("UID START: 0x%x, END: 0x%x", uidStart, uidEnd);
+
     iovec iov[] = {
         { NULL,              0 },
         { &rule,             sizeof(rule) },
@@ -320,10 +337,15 @@ WARN_UNUSED_RESULT int modifyIpRule(uint16_t action, uint32_t priority, uint8_t
         { &fwmark,           mask ? sizeof(fwmark) : 0 },
         { &FRATTR_FWMASK,    mask ? sizeof(FRATTR_FWMASK) : 0 },
         { &mask,             mask ? sizeof(mask) : 0 },
+#if 0
         { &FRATTR_UID_START, isUidRule ? sizeof(FRATTR_UID_START) : 0 },
         { &uidStart,         isUidRule ? sizeof(uidStart) : 0 },
         { &FRATTR_UID_END,   isUidRule ? sizeof(FRATTR_UID_END) : 0 },
         { &uidEnd,           isUidRule ? sizeof(uidEnd) : 0 },
+#else
+		{ &FRATTR_UID_RANGE, isUidRule ? sizeof(FRATTR_UID_RANGE) : 0 },
+		{ &uid_range,		 isUidRule ? sizeof(uid_range) : 0 },
+#endif
         { &fraIifName,       iif != IIF_NONE ? sizeof(fraIifName) : 0 },
         { iifName,           iifLength },
         { PADDING_BUFFER,    iifPadding },
