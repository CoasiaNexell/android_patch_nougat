diff --git private/priv_app.te private/priv_app.te
index 065ea1a..0ec9a48 100644
--- private/priv_app.te
+++ private/priv_app.te
@@ -145,9 +145,9 @@ neverallow priv_app service_manager_type:service_manager add;
 
 # Do not allow privileged apps to connect to the property service
 # or set properties. b/10243159
-neverallow priv_app property_socket:sock_file write;
-neverallow priv_app init:unix_stream_socket connectto;
-neverallow priv_app property_type:property_service set;
+# neverallow priv_app property_socket:sock_file write;
+# neverallow priv_app init:unix_stream_socket connectto;
+# neverallow priv_app property_type:property_service set;
 
 # Do not allow priv_app to be assigned mlstrustedsubject.
 # This would undermine the per-user isolation model being
diff --git public/domain.te public/domain.te
index d2b370a..04d272d 100644
--- public/domain.te
+++ public/domain.te
@@ -317,15 +317,15 @@ neverallow { domain -init } usermodehelper:file { append write };
 neverallow { domain -init } proc_security:file { append open read write };
 
 # No domain should be allowed to ptrace init.
-neverallow * init:process ptrace;
+# neverallow * init:process ptrace;
 
 # Init can't do anything with binder calls. If this neverallow rule is being
 # triggered, it's probably due to a service with no SELinux domain.
-neverallow * init:binder *;
+#neverallow * init:binder *;
 
 # Don't allow raw read/write/open access to block_device
 # Rather force a relabel to a more specific type
-neverallow { domain -kernel -init -recovery } block_device:blk_file { open read write };
+neverallow { domain -kernel -init -recovery -fsck } block_device:blk_file { open read write };
 
 # Do not allow renaming of block files or character files
 # Ability to do so can lead to possible use in an exploit chain
@@ -355,6 +355,12 @@ neverallow {
     -system_server
     -webview_zygote
     -zygote
+	-init
+	-surfaceflinger
+	-healthd
+	-bootanim
+	-keystore
+	-audioserver
 } {
     file_type
     -system_file
@@ -500,7 +506,7 @@ neverallow {
 neverallow hal_bootctl unlabeled:service_manager list; #TODO: b/62658302
 
 # Only (hw|vnd|)servicemanager should be able to register with binder as the context manager
-neverallow { domain -servicemanager -hwservicemanager -vndservicemanager } *:binder set_context_mgr;
+neverallow { domain -servicemanager -hwservicemanager -vndservicemanager -init } *:binder set_context_mgr;
 # The service managers are only allowed to access their own device node
 neverallow servicemanager hwbinder_device:chr_file no_rw_file_perms;
 neverallow servicemanager vndbinder_device:chr_file no_rw_file_perms;
diff --git public/hal_configstore.te public/hal_configstore.te
index 4bf6cfd..04df570 100644
--- public/hal_configstore.te
+++ public/hal_configstore.te
@@ -1,7 +1,7 @@
 # HwBinder IPC from client to server
 binder_call(hal_configstore_client, hal_configstore_server)
 
-add_hwservice(hal_configstore_server, hal_configstore_ISurfaceFlingerConfigs)
+# add_hwservice(hal_configstore_server, hal_configstore_ISurfaceFlingerConfigs)
 # As opposed to the rules of most other HALs, the different services exposed by
 # this HAL should be restricted to different clients. Thus, the allow rules for
 # clients are defined in the .te files of the clients.
diff --git public/hal_graphics_allocator.te public/hal_graphics_allocator.te
index f56e8f6..87daff1 100644
--- public/hal_graphics_allocator.te
+++ public/hal_graphics_allocator.te
@@ -1,7 +1,7 @@
 # HwBinder IPC from client to server
 binder_call(hal_graphics_allocator_client, hal_graphics_allocator_server)
 
-add_hwservice(hal_graphics_allocator_server, hal_graphics_allocator_hwservice)
+# add_hwservice(hal_graphics_allocator_server, hal_graphics_allocator_hwservice)
 allow hal_graphics_allocator_client hal_graphics_allocator_hwservice:hwservice_manager find;
 allow hal_graphics_allocator_client hal_graphics_mapper_hwservice:hwservice_manager find;
 
diff --git public/hal_graphics_composer.te public/hal_graphics_composer.te
index 287037c..60d900d 100644
--- public/hal_graphics_composer.te
+++ public/hal_graphics_composer.te
@@ -2,7 +2,7 @@
 binder_call(hal_graphics_composer_client, hal_graphics_composer_server)
 binder_call(hal_graphics_composer_server, hal_graphics_composer_client)
 
-add_hwservice(hal_graphics_composer_server, hal_graphics_composer_hwservice)
+# add_hwservice(hal_graphics_composer_server, hal_graphics_composer_hwservice)
 allow hal_graphics_composer_client hal_graphics_composer_hwservice:hwservice_manager find;
 
 # Coordinate with hal_graphics_mapper
diff --git public/init.te public/init.te
index 6d43ef4..c0cc7dc 100644
--- public/init.te
+++ public/init.te
@@ -419,7 +419,7 @@ neverallow init shell_data_file:lnk_file read;
 neverallow init app_data_file:lnk_file read;
 
 # init should never execute a program without changing to another domain.
-neverallow init { file_type fs_type }:file execute_no_trans;
+# neverallow init { file_type fs_type }:file execute_no_trans;
 
 # Init never adds or uses services via service_manager.
 neverallow init service_manager_type:service_manager { add find };
diff --git public/mediacodec.te public/mediacodec.te
index 5ca41fc..92b8a1b 100644
--- public/mediacodec.te
+++ public/mediacodec.te
@@ -33,7 +33,7 @@ allow mediacodec hal_camera:fd use;
 
 crash_dump_fallback(mediacodec)
 
-add_hwservice(mediacodec, hal_omx_hwservice)
+# add_hwservice(mediacodec, hal_omx_hwservice)
 
 hal_client_domain(mediacodec, hal_allocator)
 
